# -*- coding: utf-8 -*-
"""
Created on Fri Nov  8 19:47:52 2024
@author: azzy
Modified on Apr 1, 2025 by Grok 3 with explicit MSE storage
Modified further to fix quantity saving, bot limit, and minimum notional handling
Modified on Apr 3, 2025 to remove trade_log, cap balance at 60%, prioritize bot_limit=5 with flexible reinvestments
Modified on Apr 4, 2025 to fix executedQty parsing and self reference in close_position
"""

from keys import api_key, api_secret
from datetime import datetime
from time import sleep, time
from binance.client import Client
from binance.enums import *
from binance.exceptions import BinanceAPIException
import logging
import json
import os

ENABLE_LOGGING = True
logging.basicConfig(
    level=logging.INFO if ENABLE_LOGGING else logging.WARNING,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

INTERVAL = Client.KLINE_INTERVAL_1DAY
TRADER_INTERVAL = Client.KLINE_INTERVAL_30MINUTE
RETRAIN_INTERVAL = 86400

# --- Helper Functions ---
def truncate(number, precision):
    factor = 10.0 ** precision
    return int(number * factor) / factor

def Lsafe(client, Seed, mrgType, lvrg):
    try:
        client.futures_change_leverage(symbol=Seed, leverage=lvrg)
        client.futures_change_margin_type(symbol=Seed, marginType=mrgType)
    except:
        return

def fetch_market_data(client, symbol, limit=100, interval=INTERVAL):
    try:
        candles = client.futures_klines(symbol=symbol, interval=interval, limit=limit)
        data = [(float(candle[0]) / 1000, float(candle[4])) for candle in candles]
        return data
    except BinanceAPIException as e:
        logger.error(f"API Error fetching {symbol}: {e}")
        return None

def calculate_rsi(data, period=14):
    if len(data) < period + 1:
        return 50.0
    closes = [d[1] for d in data]
    gains = []
    losses = []
    for i in range(1, len(closes)):
        diff = closes[i] - closes[i-1]
        gains.append(max(diff, 0))
        losses.append(max(-diff, 0))
    avg_gain = sum(gains[-period:]) / period if gains else 0
    avg_loss = sum(losses[-period:]) / period if losses else 0
    rs = avg_gain / avg_loss if avg_loss != 0 else float('inf')
    rsi = 100 - (100 / (1 + rs)) if rs != float('inf') else 100
    return rsi

def determine_zone(rsi):
    if rsi > 70: return 4
    elif 50 <= rsi < 70: return 3
    elif 30 <= rsi < 50: return 2
    elif rsi < 31: return 1
    return 0

# --- Trainer Class ---
class Trainer:
    def __init__(self, client, tokens, num_periods=10, training_limit=100):
        self.client = client
        self.tokens = tokens
        self.num_periods = num_periods
        self.training_limit = training_limit
        self.weights_file = "trained_weights.json"

    def build_matrix_history(self, limit):
        all_data = {}
        max_length = 0
        for symbol in self.tokens:
            raw_data = fetch_market_data(self.client, symbol, limit=limit)
            if raw_data and len(raw_data) > 1:
                pct_changes = []
                for i in range(1, len(raw_data)):
                    prev_close = raw_data[i-1][1]
                    curr_close = raw_data[i][1]
                    pct_change = ((curr_close - prev_close) / prev_close) if prev_close != 0 else 0
                    pct_changes.append(pct_change)
                all_data[symbol] = pct_changes
                max_length = max(max_length, len(pct_changes))
        
        if not all_data:
            return []
        
        matrix_history = []
        for i in range(max_length):
            row = [all_data.get(token, [0] * max_length)[i] if i < len(all_data.get(token, [])) else 0 for token in self.tokens]
            matrix_history.append(row)
        
        return matrix_history

    def train_network(self):
        matrix_history = self.build_matrix_history(self.training_limit)
        if len(matrix_history) < self.num_periods + 1:
            logger.error("Insufficient data for training.")
            return None, None, None
        
        n = len(self.tokens)
        k = self.num_periods
        W = [[0.01 * (i + j + 1) for j in range(k * n)] for i in range(n)]
        b = [0.0 for _ in range(n)]
        learning_rate = 0.01
        max_epochs = 1000
        min_epochs = 20
        window_size = 4
        mse_threshold = 1.0
        
        all_changes = [abs(change) for row in matrix_history for change in row if change != 0]
        max_change = max(all_changes) if all_changes else 1.0
        
        old_mse = float('inf')
        if os.path.exists(self.weights_file):
            with open(self.weights_file, 'r') as f:
                old_data = json.load(f)
            old_mse = old_data.get('mse', float('inf'))
        
        mse_history = []
        for epoch in range(max_epochs):
            total_error = 0
            for t in range(self.num_periods, len(matrix_history)):
                X = matrix_history[t - self.num_periods:t]
                Y_true = matrix_history[t]
                X_flat = [x for row in X for x in row]
                Y_pred = [sum(W[i][j] * X_flat[j] for j in range(k * n)) + b[i] for i in range(n)]
                for i in range(n):
                    error = Y_true[i] - Y_pred[i]
                    total_error += error ** 2
                    for j in range(k * n):
                        W[i][j] += learning_rate * error * X_flat[j]
                    b[i] += learning_rate * error
            
            mse = total_error / (len(matrix_history) - self.num_periods)
            mse_history.append(mse)
            logger.info(f"Epoch {epoch + 1}, MSE: {mse}")
            
            if epoch >= min_epochs + window_size - 1:
                recent_changes = [mse_history[i-1] - mse_history[i] for i in range(-1, -window_size-1, -1)]
                avg_change = sum(recent_changes) / window_size
                logger.info(f"Average MSE change over last {window_size} epochs: {avg_change}")
                if avg_change < mse_threshold:
                    logger.info(f"Convergence detected: Avg MSE change {avg_change} < {mse_threshold}")
                    break
        
        if mse < old_mse:
            with open(self.weights_file, 'w') as f:
                json.dump({'W': W, 'b': b, 'max_change': max_change, 'mse': mse, 'n': n, 'k': k}, f)
            logger.info(f"Trained weights saved to {self.weights_file} with MSE {mse}")
        else:
            logger.info(f"New MSE {mse} not better than old MSE {old_mse}, keeping existing weights.")
        
        return W, b, max_change

    def load_weights(self):
        if os.path.exists(self.weights_file):
            with open(self.weights_file, 'r') as f:
                data = json.load(f)
            n_current = len(self.tokens)
            n_stored = data.get('n', 0)
            k_stored = data.get('k', self.num_periods)
            if n_current == n_stored and k_stored == self.num_periods:
                logger.info("Loaded weights from file.")
                return data['W'], data['b'], data.get('max_change', 1.0)
            else:
                logger.info(f"Token count mismatch (current: {n_current}, stored: {n_stored}) or periods mismatch (current: {self.num_periods}, stored: {k_stored}), retraining network.")
                return self.train_network()
        else:
            logger.info("Weights file not found, training network.")
            return self.train_network()

# --- Trader Class ---
class Trader:
    def __init__(self, client, tokens, num_periods=10, bot_limit=5, leverage=2, mode='S'):
        self.client = client
        self.tokens = tokens
        self.num_periods = num_periods
        self.bot_limit = bot_limit
        self.leverage = leverage
        self.mode = mode
        self.mrgType = "ISOLATED"
        self.trainer = Trainer(client, tokens, num_periods)
        self.W, self.b, self.max_change = self.trainer.load_weights()
        self.last_train_time = time()

    def predict_next_matrix(self, matrix_history):
        if not matrix_history or len(matrix_history) < self.num_periods:
            return [0] * len(self.tokens)
        
        k = self.num_periods
        n = len(self.tokens)
        X_flat = []
        for row in matrix_history[-self.num_periods:]:
            if len(row) != n:
                return [0] * n
            X_flat.extend(row)
        
        expected_input_len = k * n
        if len(X_flat) != expected_input_len or len(self.W) != n or (self.W and len(self.W[0]) != expected_input_len) or len(self.b) != n:
            logger.error(f"Dimension mismatch: Retraining required. X_flat={len(X_flat)}, expected {expected_input_len}; W={len(self.W)}x{len(self.W[0]) if self.W else 0}, expected {n}x{expected_input_len}; b={len(self.b)}, expected {n}")
            self.W, self.b, self.max_change = self.trainer.train_network()
            X_flat = []
            for row in matrix_history[-self.num_periods:]:
                X_flat.extend(row)
        
        Y = []
        for i in range(n):
            pred = sum(self.W[i][j] * X_flat[j] for j in range(k * n)) + b[i]
            Y.append(pred)
        
        return Y

    def get_active_positions(self):
        """Fetch current active positions from Binance API."""
        try:
            positions = self.client.futures_position_information()
            active = {pos['symbol']: float(pos['positionAmt']) for pos in positions if float(pos['positionAmt']) != 0}
            return active
        except Exception as e:
            logger.error(f"Error fetching positions: {e}")
            return {}

    def batch_decider(self):
        """Decide trades: 5% per initial position, flexible reinvestment up to 60% cap, maintain bot_limit=5."""
        eligible_tokens = []
        matrix_history = self.trainer.build_matrix_history(self.num_periods + 1)
        if not matrix_history:
            logger.info("Failed to build matrix history.")
            return
        
        predicted_M_t = self.predict_next_matrix(matrix_history)
        buffer = 0.002
        
        try:
            account_info = self.client.futures_account()
            total_balance = float(account_info['totalMarginBalance'])
            used_balance = float(account_info['totalPositionInitialMargin']) + float(account_info['totalOpenOrderInitialMargin'])
        except Exception as e:
            logger.error(f"Failed to fetch account balance: {e}")
            total_balance = 1000.0
            used_balance = 0.0
        
        max_allowed_balance = total_balance * 0.6  # 60% cap
        initial_allocation = total_balance * 0.05  # 5% per bot
        available_balance = max_allowed_balance - used_balance  # Max 60% minus what's used
        
        if used_balance >= max_allowed_balance:
            logger.info("Balance usage at 60%, waiting for positions to close.")
            return
        
        active_positions = self.get_active_positions()
        current_position_count = len(active_positions)
        
        for idx, token in enumerate(self.tokens):
            try:
                raw_data = fetch_market_data(self.client, token, limit=15, interval=TRADER_INTERVAL)
                if raw_data is None or len(raw_data) < 2:
                    continue
                last_price = raw_data[-1][1]
                prev_price = raw_data[-2][1]
                actual_pct_change = ((last_price - prev_price) / prev_price) if prev_price != 0 else 0
                predicted_pct_change = predicted_M_t[idx]
                rsi = calculate_rsi(raw_data)
                zone = determine_zone(rsi)
                
                diff = actual_pct_change - predicted_pct_change
                direction = None
                score = abs(diff)
                
                if predicted_pct_change > 0 and actual_pct_change > buffer and zone <= 3:
                    direction = 'FL'
                elif predicted_pct_change < 0 and actual_pct_change < -buffer and zone >= 2:
                    direction = 'FS'
                elif predicted_pct_change > 0 and actual_pct_change < -buffer and zone >= 3:
                    direction = 'FS'
                elif predicted_pct_change < 0 and actual_pct_change > buffer and zone <= 2:
                    direction = 'FL'
                
                if direction:
                    is_reinvestment = token in active_positions
                    eligible_tokens.append((token, direction, score, zone, is_reinvestment))
            except Exception as e:
                logger.error(f"Error processing {token}: {e}")

        if not eligible_tokens:
            logger.info("No eligible tokens found.")
            return

        sorted_tokens = sorted(eligible_tokens, key=lambda x: x[2], reverse=True)
        new_tokens = [t for t in sorted_tokens if not t[4]]  # New position candidates
        reinvest_tokens = [t for t in sorted_tokens if t[4]]  # Reinvestment candidates
        
        # Step 1: Fill to bot_limit with new positions
        new_position_count = self.bot_limit - current_position_count
        for token, direction, score, zone, is_reinvestment in new_tokens[:new_position_count]:
            if token in active_positions:
                continue
            try:
                Lsafe(self.client, token, self.mrgType, self.leverage)
                raw_data = fetch_market_data(self.client, token, limit=2, interval=TRADER_INTERVAL)
                if raw_data is None:
                    continue
                opprice = raw_data[-1][1]
                side = SIDE_BUY if direction == "FL" else SIDE_SELL
                
                allocation = initial_allocation
                min_notional = tinfo.get(token, {}).get("minNotional", 5.0)
                allocation = max(allocation, min_notional)
                precision = tinfo.get(token, {}).get("quantityPrecision", 2)
                
                qty = allocation / opprice
                qty = truncate(qty, precision)
                notional = qty * opprice
                
                if notional < min_notional:
                    qty = truncate(min_notional / opprice, precision)
                    notional = qty * opprice
                    allocation = notional
                
                if allocation > available_balance:
                    logger.info(f"Skipping new position {token}: Allocation {allocation} exceeds available balance {available_balance}")
                    continue
                
                logger.debug(f"{token}: Initial Allocation={allocation}, Qty={qty}, Notional={notional}, MinNotional={min_notional}")
                p = place_order(self.client, token, side, qty, precision, self.mode, reduce_only=False)
                if p and 'executedQty' in p:
                    executed_qty = float(p['executedQty'])  # Ensure correct parsing
                    position_info = self.client.futures_position_information(symbol=token)
                    position_amt = float(position_info[0]['positionAmt'])
                    if position_amt == 0:
                        logger.warning(f"Trade opened but no position for {token}, qty: {executed_qty}")
                        continue
                    logger.info(f"Trade opened: {token}, Direction: {direction}, Qty: {position_amt}, Notional: {notional}")
                    available_balance -= allocation
                    used_balance += allocation
            except Exception as e:
                logger.error(f"Order error for {token}: {e}")

        # Step 2: Reinvest with remaining balance dynamically
        if reinvest_tokens and available_balance > 0:
            reinvest_candidates = len(reinvest_tokens)
            base_reinvest_allocation = available_balance / max(1, reinvest_candidates)
            for token, direction, score, zone, is_reinvestment in reinvest_tokens:
                if used_balance >= max_allowed_balance:
                    logger.info(f"Skipping reinvestment {token}: Reached 60% balance cap")
                    break
                try:
                    Lsafe(self.client, token, self.mrgType, self.leverage)
                    raw_data = fetch_market_data(self.client, token, limit=2, interval=TRADER_INTERVAL)
                    if raw_data is None:
                        continue
                    opprice = raw_data[-1][1]
                    side = SIDE_BUY if direction == "FL" else SIDE_SELL
                    
                    allocation = max(base_reinvest_allocation, tinfo.get(token, {}).get("minNotional", 5.0))
                    allocation = min(allocation, available_balance)
                    precision = tinfo.get(token, {}).get("quantityPrecision", 2)
                    
                    qty = allocation / opprice
                    qty = truncate(qty, precision)
                    notional = qty * opprice
                    
                    if notional < tinfo.get(token, {}).get("minNotional", 5.0):
                        qty = truncate(tinfo.get(token, {}).get("minNotional", 5.0) / opprice, precision)
                        notional = qty * opprice
                        allocation = notional
                    
                    if allocation > available_balance:
                        logger.info(f"Skipping reinvestment {token}: Allocation {allocation} exceeds available balance {available_balance}")
                        continue
                    
                    logger.debug(f"{token}: Reinvestment Allocation={allocation}, Qty={qty}, Notional={notional}, MinNotional={tinfo.get(token, {}).get('minNotional', 5.0)}")
                    p = place_order(self.client, token, side, qty, precision, self.mode, reduce_only=False)
                    if p and 'executedQty' in p:
                        executed_qty = float(p['executedQty'])  # Ensure correct parsing
                        position_info = self.client.futures_position_information(symbol=token)
                        position_amt = float(position_info[0]['positionAmt'])
                        logger.info(f"Reinvested in {token}, Direction: {direction}, Added Qty: {executed_qty}, Total Qty: {position_amt}, Notional: {notional}")
                        available_balance -= allocation
                        used_balance += allocation
                except Exception as e:
                    logger.error(f"Reinvestment error for {token}: {e}")

        logger.info(f"Active positions: {len(self.get_active_positions())}/{self.bot_limit}, Used balance: {used_balance}/{max_allowed_balance}")

    def trade(self):
        while True:
            current_time = time()
            if current_time - self.last_train_time >= RETRAIN_INTERVAL:
                logger.info("24 hours elapsed, retraining network...")
                self.W, self.b, self.max_change = self.trainer.train_network()
                self.last_train_time = current_time
                logger.info("Retraining completed.")

            active_positions = self.get_active_positions()
            keys_to_remove = []
            for token in list(active_positions.keys()):
                try:
                    raw_data = fetch_market_data(self.client, token, limit=15, interval=TRADER_INTERVAL)
                    if raw_data is None:
                        continue
                    latest_rsi = calculate_rsi(raw_data)
                    latest_zone = determine_zone(latest_rsi)
                    position_amt = active_positions[token]
                    direction = 'FL' if position_amt > 0 else 'FS'
                    
                    if direction == 'FL' and latest_zone <= 2:
                        close_position(self.client, token, self.mode)
                        logger.info(f"Long closed: {token}, zone {latest_zone}")
                        keys_to_remove.append(token)
                    elif direction == 'FS' and latest_zone >= 3:
                        close_position(self.client, token, self.mode)
                        logger.info(f"Short closed: {token}, zone {latest_zone}")
                        keys_to_remove.append(token)
                except Exception as e:
                    logger.error(f"Trade processing error for {token}: {e}")

            self.batch_decider()
            sleep(1800)

def place_order(client, symbol, side, quantity, precision, mode, reduce_only=False):
    if mode == 'R':
        try:
            quantity = truncate(quantity, precision)
            order = client.futures_create_order(
                symbol=symbol,
                type=ORDER_TYPE_MARKET,
                side=side,
                quantity=quantity,
                reduceOnly=reduce_only
            )
            executed_qty = float(order.get('executedQty', quantity))  # Fallback to ordered qty if not provided
            logger.info(f"Order placed: {symbol}, {side}, Qty: {quantity}, Notional: {quantity * float(order.get('avgPrice', 0)) if 'avgPrice' in order else 'unknown'}, ReduceOnly: {reduce_only}")
            return order
        except BinanceAPIException as e:
            logger.error(f"Order failed for {symbol}: {e}")
            return None
    else:
        quantity = truncate(quantity, precision)
        logger.info(f"Simulated order: {symbol}, {side}, Qty: {quantity}, ReduceOnly: {reduce_only}")
        return {'symbol': symbol, 'side': side, 'executedQty': str(quantity)}

def close_position(client, symbol, mode):
    if mode == 'R':
        try:
            position_info = client.futures_position_information(symbol=symbol)  # Use client, not self.client
            position_amt = float(position_info[0]['positionAmt'])
            if position_amt == 0:
                logger.info(f"No position to close for {symbol}")
                return None
            close_side = SIDE_SELL if position_amt > 0 else SIDE_BUY
            abs_qty = abs(position_amt)
            result = client.futures_create_order(
                symbol=symbol,
                type=ORDER_TYPE_MARKET,
                side=close_side,
                quantity=abs_qty,
                reduceOnly=True
            )
            logger.info(f"Closed {symbol}: {position_amt}, Qty: {abs_qty}")
            return result
        except BinanceAPIException as e:
            logger.error(f"Close failed for {symbol}: {e}")
            return None
    else:
        logger.info(f"Simulated close: {symbol}")
        return True

if __name__ == "__main__":
    client = Client(api_key, api_secret)
    exInfo = client.futures_exchange_info()
    tokens = [symbol["symbol"] for symbol in exInfo["symbols"]
              if symbol["contractType"] == "PERPETUAL" and "USDT" in symbol["symbol"] and symbol["status"] == "TRADING"]
    tinfo = {
        symbol["symbol"]: {
            "quantityPrecision": symbol["quantityPrecision"],
            "minNotional": float(next(f["notional"] for f in symbol["filters"] if f["filterType"] == "MIN_NOTIONAL"))
        }
        for symbol in exInfo["symbols"]
        if symbol["contractType"] == "PERPETUAL" and "USDT" in symbol["symbol"] and symbol["status"] == "TRADING"
    }
    
    print('Training network...')
    trainer = Trainer(client, tokens)
    W, b, max_change = trainer.load_weights()
    print('Booted up trader...')
    trader = Trader(client, tokens, num_periods=10, bot_limit=5, leverage=2, mode='R')
    trader.trade()
